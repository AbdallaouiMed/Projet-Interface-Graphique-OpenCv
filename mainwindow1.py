# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QMainWindow, QApplication
from PyQt5.uic import loadUi
from scipy.signal import convolve2d
import matplotlib.pyplot as plt
import numpy as np
import sys
import cv2



class Ui_imginit(object):
    def load_image(self, iname):
        self.image = cv2.imread(iname)
        self.tmp = self.image
        self.displayImage()

    def displayImage(self, window=1):
        qformat = QImage.Format_Indexed8

        if len(self.image.shape) == 3:
            if (self.image.shape[2]) == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
        img = QImage(self.image, self.image.shape[1], self.image.shape[0], self.image.strides[0], qformat)
        img = img.rgbSwapped()
        if window == 1:
            self.label.setPixmap(QPixmap.fromImage(img))
            self.label.setAlignment(
                QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        if window == 2:
            self.label_2.setPixmap(QPixmap.fromImage(img))
            self.label_2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)

    def open_img(self):
        name, filter = QFileDialog.getOpenFileName(None, 'Open File', 'C:\\Users\HP\Desktop\pythonPoject1',
                                                    "Image Files (*)")

    def save_img(self):
        iname, filter = QFileDialog.getSaveFileName(None, 'Save File', 'C:\\', "Image Files (*.png)")
        if iname:
            cv2.imwrite(iname, self.image)
            print("Error")

    def reset(self):
        self.image = self.tmp
        self.displayImage(2)

    def rot(self):
        rows, cols, steps = self.image.shape
        M = cv2.getRotationMatrix2D((cols / 2, rows / 2), 90, 1)
        self.image = cv2.warpAffine(self.image, M, (cols, rows))
        self.displayImage(2)

    def gray(self):
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        self.displayImage(2)

    def LocalBinary(self):
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        self.image = cv2.adaptiveThreshold(self.image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)
        self.displayImage(2)

    def Otsu(self):
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        x, self.image = cv2.threshold(self.image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        self.displayImage(2)

    def histogram_Equalization(self):
        self.image = self.tmp
        new_img = cv2.cvtColor(self.image, cv2.COLOR_RGB2YUV)
        new_img[:, :, 0] = cv2.equalizeHist(new_img[:, :, 0])
        self.image = cv2.cvtColor(new_img, cv2.COLOR_YUV2RGB)
        self.displayImage(2)

    def Gamma_trans(self, gamma):
        self.image = self.tmp
        gamma = gamma*0.1
        invGamma = 1.0 /gamma
        table = np.array([((i / 255.0) ** invGamma) * 255
            for i in np.arange(0, 256)]).astype("uint8")

        self.image = cv2.LUT(self.image, table)
        self.displayImage(2)

    def gamma(self):
        self.image = self.tmp
        gamma = 1.5
        invGamma = 1.0 / gamma
        table = np.array([((i / 255.0) ** invGamma) * 255
            for i in np.arange(0, 256)]).astype("uint8")
        self.image = cv2.LUT(self.image, table)
        self.displayImage(2)

    def mean(self):
        size= 6
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        w = np.size(self.image, 0)
        h = np.size(self.image, 1)
        imgfiltred = np.zeros((w, h), np.uint8)
        m1 = np.zeros((size, size), np.uint8)
        for i in range(int(size / 2), w - int(size / 2)):
            for j in range(int(size / 2), h - int(size / 2)):
                m1 = self.image[i - int(size / 2):i + int(size / 2), j - int(size / 2):j + int(size / 2)]
                imgfiltred[i, j] = np.sum(m1) / (size * size)
        self.image = imgfiltred
        self.displayImage(2)

    def dilatation(self):

        elt = np.array([[1, 0, 1], [1, 0, 1], [1, 1, 1]])
        print(elt)
        x, y = elt.shape
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        (v, self.image) = cv2.threshold(self.image, 150, 255, cv2.THRESH_BINARY)
        s = int(x / 2)
        new_img = np.zeros((self.image.shape[0], self.image.shape[1]), dtype=np.uint8)
        for i in range(s, self.image.shape[0] - s):
            for j in range(s, self.image.shape[1] - s):
                t = self.image[i - s:i + s + 1, j - s:j + s + 1]
                result = t * elt
                count = np.sum(result)
                if (count == 0):
                    new_img[i, j] = 0
                else:
                    new_img[i, j] = 255

        self.image = new_img
        self.displayImage(2)

    def median(self):
        size = 6
        s_m = int(size / 2)
        w = np.size(self.image, 0)
        h = np.size(self.image, 1)
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        imgfiltred = np.zeros((w, h), np.uint8)
        arr = np.zeros(size * size, dtype=int)

        for i in range(s_m, w - s_m):
            for j in range(s_m, h - s_m):
                count = 0
                for k in range(-s_m, s_m + 1):
                    for x in range(-s, s + 1):
                        arr[count] = self.image[i + k, j + x]
                        count = count + 1
                arr = sorted(arr)
                imgfiltred[i, j] = arr[1 + int(count / 2)]
        self.image = imgfiltred
        self.displayImage(2)
    def prewitt(self):
        self.image_gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        m = np.matrix([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])
        n = np.rot90(m)
        X = cv2.filter2D(self.image_gray, -1, m)
        Y = cv2.filter2D(self.image_gray, -1, n)
        self.mod = X + Y
        self.image = self.mod
        self.displayImage(2)

    def sobel(self):
        self.image_gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        m = np.matrix([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
        n = np.rot90(m)
        X = cv2.filter2D(self.image_gray, -1, m)
        Y = cv2.filter2D(self.image_gray, -1, n)
        self.mod = X + Y
        self.image = self.mod
        self.displayImage(2)

    def laplacien(self):
        self.image_gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        kernel = np.array([[0, 1, 0],
                           [1, -4, 1],
                           [0, 1, 0]])

        self.modlaplacian = cv2.filter2D(self.image_gray, -1, kernel)
        self.image = self.modlaplacian
        self.displayImage(2)


    def fermeture(self):
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        (v, self.image) = cv2.threshold(self.image, 150, 255, cv2.THRESH_BINARY)
        k = np.ones((7, 7), np.uint8)
        self.image = cv2.dilate(self.image, k, iterations=1)
        self.image = cv2.erode(self.image, k, iterations=1)
        self.displayImage(2)


    def setupUi(self, imginit):
        imginit.setObjectName("imginit")
        imginit.resize(800, 600)
        imginit.setFocusPolicy(QtCore.Qt.TabFocus)
        self.centralwidget = QtWidgets.QWidget(imginit)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(85, 20, 471, 288))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.Browse = QtWidgets.QPushButton(self.layoutWidget)
        self.Browse.setObjectName("Browse")
        self.Browse.triggred.connect(self.load_image())
        self.Browse.trigged.connect(self.displayImage(imginit,window=1))
        self.horizontalLayout.addWidget(self.Browse)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.graphicsView = QtWidgets.QGraphicsView(self.layoutWidget)
        self.graphicsView.setObjectName("graphicsView")
        self.verticalLayout.addWidget(self.graphicsView)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.segmentation = QtWidgets.QPushButton(self.layoutWidget)
        self.segmentation.setObjectName("segmentation")
        self.segmentation.triggred.connect(self.laplacien())
        self.segmentation.triggred.connect(self.prewitt())
        self.segmentation.triggred.connect(self.sobel())
        self.segmentation.triggred.connect(self.Otsu())
        self.gridLayout.addWidget(self.segmentation, 0, 0, 1, 1)
        self.filtrageMoyenne = QtWidgets.QPushButton(self.layoutWidget)
        self.filtrageMoyenne.setObjectName("filtrageMoyenne")
        self.filtrageMoyenne.triggred.connect(self.filtrageMoyenne)
        self.gridLayout.addWidget(self.filtrageMoyenne, 0, 1, 1, 1)
        self.FiltrageMediane = QtWidgets.QPushButton(self.layoutWidget)
        self.FiltrageMediane.setObjectName("FiltrageMediane")
        self.FiltrageMediane.triggred.connect(self.median())
        self.gridLayout.addWidget(self.FiltrageMediane, 0, 2, 1, 1)
        self.dilatation = QtWidgets.QPushButton(self.layoutWidget)
        self.dilatation.setObjectName("dilatation")
        self.gridLayout.addWidget(self.dilatation, 0, 3, 1, 1)
        self.dilatation.triggred.connect(self.dilatation)
        self.detectionContours = QtWidgets.QPushButton(self.layoutWidget)
        self.detectionContours.setObjectName("detectionContours")
        self.gridLayout.addWidget(self.detectionContours, 1, 0, 1, 1)
        self.threshold = QtWidgets.QPushButton(self.layoutWidget)
        self.threshold.setObjectName("threshold")
        self.gridLayout.addWidget(self.threshold, 1, 1, 1, 1)
        self.ecroison.triggred.connect(self.fermeture())
        self.ecroison = QtWidgets.QPushButton(self.layoutWidget)
        self.ecroison.setObjectName("ecroison")
        self.gridLayout.addWidget(self.ecroison, 1, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(570, 70, 161, 141))
        self.widget.setObjectName("widget")
        self.Imgeinittext = QtWidgets.QLineEdit(self.centralwidget)
        self.Imgeinittext.setGeometry(QtCore.QRect(622, 230, 81, 24))
        self.Imgeinittext.setObjectName("Imgeinittext")
        imginit.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(imginit)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpenCV_Project = QtWidgets.QMenu(self.menubar)
        self.menuOpenCV_Project.setObjectName("menuOpenCV_Project")
        imginit.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(imginit)
        self.statusbar.setObjectName("statusbar")
        imginit.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuOpenCV_Project.menuAction())

        self.retranslateUi(imginit)
        self.Browse.clicked.connect(self.graphicsView.show) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(imginit)

    def retranslateUi(self, imginit):
        _translate = QtCore.QCoreApplication.translate
        imginit.setWindowTitle(_translate("imginit", "OPenCV Project"))
        self.lineEdit.setText(_translate("imginit", "\\C:Desktop\\Documents\\Qt"))
        self.Browse.setText(_translate("imginit", "Browse"))
        self.segmentation.setText(_translate("imginit", "Segmentation"))
        self.filtrageMoyenne.setText(_translate("imginit", "Filtrage par moyenne"))
        self.FiltrageMediane.setText(_translate("imginit", "Filtrage par Mediane"))
        self.dilatation.setText(_translate("imginit", "Dilatation"))
        self.detectionContours.setText(_translate("imginit", "Detection Des Contours"))
        self.threshold.setText(_translate("imginit", "Threshold"))
        self.ecroison.setText(_translate("imginit", "Ecroison"))
        self.Imgeinittext.setText(_translate("imginit", "Image initiale"))
        self.menuOpenCV_Project.setTitle(_translate("imginit", "OpenCV Project"))

if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_imginit()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())